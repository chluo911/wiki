<?php
/**
 * @author Antoine Musso
 * @copyright Copyright © 2011, Antoine Musso
 * @file
 */

/**
 * Test class for MWNamespace.
 * Generated by PHPUnit on 2011-02-20 at 21:01:55.
 * @todo covers tags
 * @todo FIXME: this test file is a mess
 *
 */
class MWNamespaceTest extends MediaWikiTestCase
{
    protected function setUp()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    # ### START OF TESTS #########################################################

    /**
     * @todo Write more texts, handle $wgAllowImageMoving setting
     * @covers MWNamespace::isMovable
     */
    public function testIsMovable()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * Please make sure to change testIsTalk() if you change the assertions below
     * @covers MWNamespace::isSubject
     */
    public function testIsSubject()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * Reverse of testIsSubject().
     * Please update testIsSubject() if you change assertions below
     * @covers MWNamespace::isTalk
     */
    public function testIsTalk()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @covers MWNamespace::getSubject
     */
    public function testGetSubject()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * Regular getTalk() calls
     * Namespaces without a talk page (NS_MEDIA, NS_SPECIAL) are tested in
     * the function testGetTalkExceptions()
     * @covers MWNamespace::getTalk
     */
    public function testGetTalk()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * Exceptions with getTalk()
     * NS_MEDIA does not have talk pages. MediaWiki raise an exception for them.
     * @expectedException MWException
     * @covers MWNamespace::getTalk
     */
    public function testGetTalkExceptionsForNsMedia()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * Exceptions with getTalk()
     * NS_SPECIAL does not have talk pages. MediaWiki raise an exception for them.
     * @expectedException MWException
     * @covers MWNamespace::getTalk
     */
    public function testGetTalkExceptionsForNsSpecial()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * Regular getAssociated() calls
     * Namespaces without an associated page (NS_MEDIA, NS_SPECIAL) are tested in
     * the function testGetAssociatedExceptions()
     * @covers MWNamespace::getAssociated
     */
    public function testGetAssociated()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    # ## Exceptions with getAssociated()
    # ## NS_MEDIA and NS_SPECIAL do not have talk pages. MediaWiki raises
    # ## an exception for them.
    /**
     * @expectedException MWException
     * @covers MWNamespace::getAssociated
     */
    public function testGetAssociatedExceptionsForNsMedia()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @expectedException MWException
     * @covers MWNamespace::getAssociated
     */
    public function testGetAssociatedExceptionsForNsSpecial()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @todo Implement testExists().
     */
    /*
    public function testExists() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet. Rely on $wgCanonicalNamespaces.'
        );
    }
    */

    /**
     * Test MWNamespace::equals
     * Note if we add a namespace registration system with keys like 'MAIN'
     * we should add tests here for equivilance on things like 'MAIN' == 0
     * and 'MAIN' == NS_MAIN.
     * @covers MWNamespace::equals
     */
    public function testEquals()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @covers MWNamespace::subjectEquals
     */
    public function testSubjectEquals()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @covers MWNamespace::subjectEquals
     */
    public function testSpecialAndMediaAreDifferentSubjects()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @todo Implement testGetCanonicalNamespaces().
     */
    /*
    public function testGetCanonicalNamespaces() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet. Rely on $wgCanonicalNamespaces.'
        );
    }
    */
    /**
     * @todo Implement testGetCanonicalName().
     */
    /*
        public function testGetCanonicalName() {
            // Remove the following lines when you implement this test.
            $this->markTestIncomplete(
              'This test has not been implemented yet. Rely on $wgCanonicalNamespaces.'
            );
        }
    */
    /**
     * @todo Implement testGetCanonicalIndex().
     */
    /*
    public function testGetCanonicalIndex() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet. Rely on $wgCanonicalNamespaces.'
        );
    }
    */

    /**
     * @todo Implement testGetValidNamespaces().
     */
    /*
    public function testGetValidNamespaces() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet. Rely on $wgCanonicalNamespaces.'
        );
    }
    */

    /**
     * @covers MWNamespace::canTalk
     */
    public function testCanTalk()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @covers MWNamespace::isContent
     */
    public function testIsContent()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * Similar to testIsContent() but alters the $wgContentNamespaces
     * global variable.
     * @covers MWNamespace::isContent
     */
    public function testIsContentAdvanced()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @covers MWNamespace::isWatchable
     */
    public function testIsWatchable()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @covers MWNamespace::hasSubpages
     */
    public function testHasSubpages()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @covers MWNamespace::getContentNamespaces
     */
    public function testGetContentNamespaces()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @covers MWNamespace::getSubjectNamespaces
     */
    public function testGetSubjectNamespaces()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @covers MWNamespace::getTalkNamespaces
     */
    public function testGetTalkNamespaces()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * Some namespaces are always capitalized per code definition
     * in MWNamespace::$alwaysCapitalizedNamespaces
     * @covers MWNamespace::isCapitalized
     */
    public function testIsCapitalizedHardcodedAssertions()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * Follows up for testIsCapitalizedHardcodedAssertions() but alter the
     * global $wgCapitalLink setting to have extended coverage.
     *
     * MWNamespace::isCapitalized() rely on two global settings:
     *   $wgCapitalLinkOverrides = []; by default
     *   $wgCapitalLinks = true; by default
     * This function test $wgCapitalLinks
     *
     * Global setting correctness is tested against the NS_PROJECT and
     * NS_PROJECT_TALK namespaces since they are not hardcoded nor specials
     * @covers MWNamespace::isCapitalized
     */
    public function testIsCapitalizedWithWgCapitalLinks()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * Counter part for MWNamespace::testIsCapitalizedWithWgCapitalLinks() now
     * testing the $wgCapitalLinkOverrides global.
     *
     * @todo split groups of assertions in autonomous testing functions
     * @covers MWNamespace::isCapitalized
     */
    public function testIsCapitalizedWithWgCapitalLinkOverrides()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @covers MWNamespace::hasGenderDistinction
     */
    public function testHasGenderDistinction()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    /**
     * @covers MWNamespace::isNonincludable
     */
    public function testIsNonincludable()
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    # ###### HELPERS ###########################################################
    public function __call($method, $args)
    {
        // Call the real method if it exists
        if (method_exists($this, $method)) {
            return $this->$method($args);
        }

        if (preg_match(
            '/^assert(Has|Is|Can)(Not|)(Subject|Talk|Watchable|Content|Subpages|Capitalized)$/',
            $method,
            $m
        )) {
            # Interprets arguments:
            $ns = $args[0];
            $msg = isset($args[1]) ? $args[1] : " dummy message";

            # Forge the namespace constant name:
            if ($ns === 0) {
                $ns_name = "NS_MAIN";
            } else {
                $ns_name = "NS_" . strtoupper(MWNamespace::getCanonicalName($ns));
            }
            # ... and the MWNamespace method name
            $nsMethod = strtolower($m[1]) . $m[3];

            $expect = ($m[2] === '');
            $expect_name = $expect ? 'TRUE' : 'FALSE';

            return $this->assertEquals(
                $expect,
                MWNamespace::$nsMethod($ns, $msg),
                "MWNamespace::$nsMethod( $ns_name ) should returns $expect_name"
            );
        }

        throw new Exception(__METHOD__ . " could not find a method named $method\n");
    }

    public function assertSameSubject($ns1, $ns2, $msg = '')
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }

    public function assertDifferentSubject($ns1, $ns2, $msg = '')
    {
$trace = debug_backtrace();
	  error_log(__FILE__);
	  var_dump(__FUNCTION__);
     error_log( print_r( $trace, true ));
	  die();
    }
}
